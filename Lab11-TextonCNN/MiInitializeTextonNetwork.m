function net = MiInitializeTextonNetwork( input_args )

%Esta funcion debe correrse en el codigo de TrainCNN
f=1/100 ;
net.layers = {} ;

%Entrada = 64*64*1. Salida = 60*60*64
net.layers{end+1} = struct('type', 'conv', ...
                           'filters',f*randn(5,5,1,64, 'single'),...
                           'biases', zeros(1,64,'single'), ...
                           'stride', 1, ...     					   
                           'pad', 0) ;

%Entrada = 60*60*64. Salida = 60*60*64
net.layers{end+1} = struct('type', 'relu');

%Entrada = 60*60*64. Salida = 56*56*128
net.layers{end+1} = struct('type', 'conv', ...
                           'filters',f*randn(5,5,64,128, 'single'),...
                           'biases', zeros(1,128,'single'), ...
                           'stride', 1, ...     					   
                           'pad', 0) ;
                       
%Entrada = 56*56*128. Salida = 56*56*128                       
net.layers{end+1} = struct('type', 'relu'); 

%Entrada = 56*56*128. Salida = 28*28*128
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0);

%Entrada = 28*28*128. Salida = 24*24*256
net.layers{end+1} = struct('type', 'conv', ...
                           'filters',f*randn(5,5,128,256, 'single'),...
                           'biases', zeros(1,256,'single'), ...
                           'stride', 1, ...     					   
                           'pad', 0);  

%Entrada = 24*24*256. Salida = 24*24*256
net.layers{end+1} = struct('type', 'relu');

%Entrada = 24*24*256. Salida = 20*20*300
net.layers{end+1} = struct('type', 'conv', ...
                           'filters',f*randn(5,5,256,300, 'single'),...
                           'biases', zeros(1,300,'single'), ...
                           'stride', 1, ...     					   
                           'pad', 0) ;  

%Entrada = 20*20*300. Salida = 20*20*300
net.layers{end+1} = struct('type', 'relu'); 
   
%Entrada = 20*20*300. Salida = 10*10*300
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;     

%Entrada = 10*10*300. Salida = 8*8*350
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(3,3,300,350, 'single'),...
                           'biases', zeros(1,350,'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;

%Entrada = 8*8*350. Salida = 8*8*350
 net.layers{end+1} = struct('type', 'relu');

%Entrada = 8*8*350. Salida = 6*6*400 
 net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(3,3,350,400, 'single'),...
                           'biases', zeros(1,400,'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;

%Entrada = 6*6*400. Salida = 1*1*4000
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [6 6], ...
                           'stride', 6, ...
                           'pad', 0);
                       
net.layers{end+1} = struct('type', 'softmaxloss') ;
end